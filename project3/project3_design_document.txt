                    +---------------------------+
        |   CS 140    |
        | PROJECT 3: VIRTUAL MEMORY |
        |    DESIGN DOCUMENT  |
        +---------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Changho Yoon <ho9938@unist.ac.kr>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

      PAGE TABLE MANAGEMENT
      =====================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct page
{
	// virtual address
	void *address;
	// associated frame pointer
	struct frame *frame;
	// associated file	
	struct file *file;
	// file offset
	off_t ofs;
	// bytes to read in file
	uint32_t read_bytes;
	// bytes not to read in file
	uint32_t zero_bytes;
	// writable?
	bool writable;
	// elem for supplemental page table
	struct hash_elem sptelem;
};

struct thread
{
	// supplemental page table
	struct hash spt;
}

---- ALGORITHMS ----

>> A2: In a few paragraphs, describe your code for locating the frame,
>> if any, that contains the data of a given page.

each frame has its own structure, struct frame. and each user page
has its own structure, struct page. each structure has field that
indicates each other, and some additional informations.

>> A3: How does your code coordinate accessed and dirty bits between
>> kernel and user virtual addresses that alias a single frame, or
>> alternatively how do you avoid the issue?

acessed bits are used for deciding frame-to-evict.
dirty bits are used for memory mapping. when munmap(), dirty frame
must be written to the original file. 

---- SYNCHRONIZATION ----

>> A4: When two user processes both need a new frame at the same time,
>> how are races avoided?

---- RATIONALE ----

>> A5: Why did you choose the data structure(s) that you did for
>> representing virtual-to-physical mappings?

my struct frame and struct page is good for earning information
about it easily.

           PAGING TO AND FROM DISK
           =======================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

// frame table
static struct list frame_table;

struct frame
{
	// kernel address
	void *address;
	// associated page pointer
	struct page *page;
	// elem for frame table
	struct list_elem ftelem;
	// swap slot index
	size_t ss_idx;
};

---- ALGORITHMS ----

>> B2: When a frame is required but none is free, some frame must be
>> evicted.  Describe your code for choosing a frame to evict.

it firstly use FIFO. however, even though the frame is first-in, if its
accessed bit is on, then neglect it once. instead, turn off the bit.

>> B3: When a process P obtains a frame that was previously used by a
>> process Q, how do you adjust the page table (and any other data
>> structures) to reflect the frame Q no longer has?

it doesn't matter. each process has its own page table and own page nodes.
if node allocated the frame, then the frame is which of process that own
the page node.

>> B4: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.

simply, if referenced address is above esp-PGSIZE, then I saw it as stack
expansion.

---- SYNCHRONIZATION ----

>> B5: Explain the basics of your VM synchronization design.  In
>> particular, explain how it prevents deadlock.  (Refer to the
>> textbook for an explanation of the necessary conditions for
>> deadlock.)

>> B6: A page fault in process P can cause another process Q's frame
>> to be evicted.  How do you ensure that Q cannot access or modify
>> the page during the eviction process?  How do you avoid a race
>> between P evicting Q's frame and Q faulting the page back in?

access for frame table must be synchronized by lock

>> B7: Suppose a page fault in process P causes a page to be read from
>> the file system or swap.  How do you ensure that a second process Q
>> cannot interfere by e.g. attempting to evict the frame while it is
>> still being read in?

samely, access for frame table must be synchronized by lock

>> B8: Explain how you handle access to paged-out pages that occur
>> during system calls.  Do you use page faults to bring in pages (as
>> in user programs), or do you have a mechanism for "locking" frames
>> into physical memory, or do you use some other design?  How do you
>> gracefully handle attempted accesses to invalid virtual addresses?

just call exit system call. I couldn't find the solution.

---- RATIONALE ----

>> B9: A single lock for the whole VM system would make
>> synchronization easy, but limit parallelism.  On the other hand,
>> using many locks complicates synchronization and raises the
>> possibility for deadlock but allows for high parallelism.  Explain
>> where your design falls along this continuum and why you chose to
>> design it this way.

       MEMORY MAPPED FILES
       ===================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

struct page
{
	// mapping for mmap
	int mapping;
	// elem for mml
	struct list_elem mmlelem;
};

struct thread
{
	// mmaped page list
	struct list mml;
	// latest mapping
	int mapping;
}

---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.

use struct page, same as usual pages. however, they are cared specially
inside a list mml, and some different functions. they must be written to
file before they are freed.

>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.

---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.

in my code, they shares some functions. for example, I used the function
that be called when page fault occurs, to load file to mmaped page.

         SURVEY QUESTIONS
         ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
