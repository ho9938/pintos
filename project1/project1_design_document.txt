      +--------------------+
      |        CS 140      |
      | PROJECT 1: THREADS |
      |   DESIGN DOCUMENT  |
      +--------------------+
           
---- GROUP ----

>> Fill in the names and email addresses of your group members.

Changho Yoon <ho9938@unist.ac.kr>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

           ALARM CLOCK
           ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

Added to threads/thread.h/struct thread:

	/* Ticks to wake up, initialized to INT64_MAX */
	int64_t ticks_to_awake; 

Added to threads/thread.c:

	/* List of processes in THREAD_READY state, that is, processes
       that are ready to run but not actually running. */
	static struct list ready_list;

	static int64_t upcoming_ticks_to_awake;  /* # of timer ticks to thread_awake be called. */

	/* Sets the current thread's ticks_to_awake to ticks. */
	void thread_set_ticks_to_awake (int64_t ticks)

	/* Returns the current thread's ticks_to_awake. */
	int64_t thread_get_ticks_to_awake (void)

	/* Returns upcoming_ticks_to_awake. */
	int64_t thread_get_upcoming_ticks_to_awake (void)

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

1. timer_sleep()
1-1. call thread_sleep() with "current ticks + additional ticks".
2. thread_sleep()
2-1. set ticks_to_awake of thread.
2-2. update upcoming_ticks_to_awake.
2-3. push thread into sleep_list.
2-4. block thread by calling thread_block().

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

To minimize time, upcoming_ticks_to_awake is added to thread.c.
This static variable indicates when to thread_awake() be called,
So unnecessary calls of thread_awake() are eliminated.
This variable is updated when timer_sleep(), timer_awake() are called.

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

This sleep-and-awake design prevents busy-waiting of sleeping thread,
so that CPU can be used for non-blocked threads.

       PRIORITY SCHEDULING
       ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

no changed declaration.

I just reimpelmented such functions:

/* removed codes for RR scheduler */
void thread_tick (void) 
	
/* changed method for select next_thread according to the priority. */
static struct thread *next_thread_to_run (void) 

/* added thread_yield () in the last portion of function,
   so that preemption could occur immediately. */
void thread_set_priority (int new_priority) 
tid_t thread_create (const char *name, int priority,
		               thread_func *function, void *aux) 

>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

There is one more design to make priority scheduler, that is
making ready_list ordered. My design is simpler to implement
because I need to reimplement next_thread_to_run() only. So I chose it.

        ADVANCED SCHEDULER
        ==================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0
 4
 8
12
16
20
24
28
32
36

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

>> C6: The assignment explains arithmetic for fixed-point math in
>> detail, but it leaves it open to you to implement it.  Why did you
>> decide to implement it the way you did?  If you created an
>> abstraction layer for fixed-point math, that is, an abstract data
>> type and/or a set of functions or macros to manipulate fixed-point
>> numbers, why did you do so?  If not, why not?

         SURVEY QUESTIONS
         ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
